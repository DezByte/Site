<?php

    /**
    *
    * Generated by DezDevTools @ 2016-03-13 17:35:06
    *
    * @author Ivan Gontarenko
    * @licence MIT
    *
    */

    namespace SiteDezz\Model\Entity;

    use Dez\ORM\Collection\ModelCollection;
    use Dez\ORM\Model\QueryBuilder;
    use SiteDezz\Model\Entity\GeneratedEntity\Entity_dba5d91846ce1a5e63734dfcbcb481cb;

    class Articles extends Entity_dba5d91846ce1a5e63734dfcbcb481cb
    {

        const STATUS_PUBLISHED = 'published';

        const STATUS_UNPUBLISHED = 'unpublished';

        /**
         * @return ModelCollection
         * @throws \Dez\ORM\Exception
         */
        public function xrefs()
        {
            return $this->hasMany(ArticleTagRef::class, 'article_id', 'id');
        }

        /**
         * @return ArticleCategories
         * @throws \Dez\ORM\Exception
         */
        public function category()
        {
            return $this->hasOne(ArticleCategories::class, 'id', 'category_id');
        }

        /**
         * @param int $length
         * @return string
         */
        public function shortContent($length = 128)
        {
            $content = $this->getContent();

            $content = explode(" ", $content);
            $content = array_slice($content, 0, $length);

            return implode(" ", $content);
        }

        /**
         * @param string $tags
         * @return $this
         */
        public function createTags($tags)
        {
            $this->xrefs()->each(function($xref){
                /** @var ArticleTagRef $xref */
                $xref->tag()->delete();
                $xref->delete();
            });

            $tags = array_map(function($tag){
                return trim($tag);
            }, explode(',', $tags));

            foreach ($tags as $tag) {

                $tagModel = (new ArticleTags())
                    ->setName($tag)->setTag(\URLify::filter($tag))
                ;
                $tagModel->save(true);

                if($tagModel->id() == 0) {
                    $tagModel = ArticleTags::query()->where('tag', \URLify::filter($tag))->find()->first();
                }

                (new ArticleTagRef())
                    ->setArticleId($this->id())
                    ->setTagId($tagModel->id())
                    ->save()
                ;
            }

            return $this;
        }

        /**
         * @return QueryBuilder
         */
        public static function popular()
        {
            return static::published()->order('views', 'desc');
        }

        /**
         * @return QueryBuilder
         */
        public static function published()
        {
            return static::query()->where('status', static::STATUS_PUBLISHED);
        }

    }